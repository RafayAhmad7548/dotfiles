{"ref":"b169b45b-60d2-49f3-854f-8ee4a126bf87","syncData":{"version":1,"machineId":"4e86ef9b-62f8-4424-ab9d-d67492e993e1","content":"{\"cpp.json\":\"{\\n\\t// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\n\\t\\\"Startup\\\": {\\n\\t\\t\\\"scope\\\": \\\"cpp\\\",\\n\\t\\t\\\"prefix\\\": \\\"rafay\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"/*\\\",\\n\\t\\t\\t\\\"Rafay Ahmad\\\",\\n\\t\\t\\t\\\"23I-2526\\\",\\n\\t\\t\\t\\\"*/\\\"\\n\\t\\t\\t\\\"#include <iostream>\\\",\\n\\t\\t\\t\\\"using namespace std;\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"int main(){\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\t$0\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\treturn 0;\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t]\\n\\t},\\n\\t\\\"Better Cout\\\": {\\n\\t\\t\\\"scope\\\": \\\"cpp\\\",\\n\\t\\t\\\"prefix\\\": \\\"co\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"cout<<$1;$0\\\"\\n\\t\\t]\\n\\t},\\n\\t\\\"fori\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"fori\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"for(${1:int} ${2:i}=${3:0};${2:i}<${4:max};${2:i}${5:++}){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Indexed for loop\\\"\\n\\t},\\n\\t\\\"foreach\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"foreach\\\", \\\"iter\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"for(${1:type} ${2:var} : ${3:iterable}){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Enhanced for loop\\\"\\n\\t},\\n\\t\\\"if\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"if\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"if(${1:condition}){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"if statement\\\"\\n\\t},\\n\\t\\\"ifelse\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"ifelse\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"if(${1:condition}){\\\",\\n\\t\\t\\t\\\"\\\\t$2\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"else{\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"if/else statement\\\"\\n\\t},\\n\\t\\\"ifnull\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"ifnull\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"if(${1:condition}==null){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"if statement checking for null\\\"\\n\\t},\\n\\t\\\"ifnotnull\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"ifnotnull\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"if(${1:condition}!=null){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"if statement checking for not null\\\"\\n\\t},\\n\\t\\\"While Statement\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"while\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"while(${1:condition}){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"While Statement\\\"\\n\\t},\\n\\t\\\"Do-While Statement\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"dowhile\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"do{\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}while(${1:condition});\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Do-While Statement\\\"\\n\\t},\\n\\t\\\"Switch Statement\\\": {\\n\\t\\t\\\"prefix\\\": \\\"switch\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"switch(${1:key}){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Switch Statement\\\"\\n\\t},\\n\\n}\\n\\n{\\n\\t// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\n\\t\\\"Startup\\\": {\\n\\t\\t\\\"scope\\\": \\\"cpp\\\",\\n\\t\\t\\\"prefix\\\": \\\"rafay\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"/*\\\",\\n\\t\\t\\t\\\"Rafay Ahmad\\\",\\n\\t\\t\\t\\\"23I-2526\\\",\\n\\t\\t\\t\\\"*/\\\"\\n\\t\\t\\t\\\"#include <iostream>\\\",\\n\\t\\t\\t\\\"using namespace std;\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"int main(){\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\t$0\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\treturn 0;\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t]\\n\\t},\\n\\t\\\"Better Cout\\\": {\\n\\t\\t\\\"scope\\\": \\\"cpp\\\",\\n\\t\\t\\\"prefix\\\": \\\"co\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"cout<<$1;$0\\\"\\n\\t\\t]\\n\\t},\\n\\t\\\"fori\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"fori\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"for(${1:int} ${2:i}=${3:0};${2:i}<${4:max};${2:i}${5:++}){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Indexed for loop\\\"\\n\\t},\\n\\t\\\"foreach\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"foreach\\\", \\\"iter\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"for(${1:type} ${2:var} : ${3:iterable}){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Enhanced for loop\\\"\\n\\t},\\n\\t\\\"if\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"if\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"if(${1:condition}){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"if statement\\\"\\n\\t},\\n\\t\\\"ifelse\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"ifelse\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"if(${1:condition}){\\\",\\n\\t\\t\\t\\\"\\\\t$2\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"else{\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"if/else statement\\\"\\n\\t},\\n\\t\\\"ifnull\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"ifnull\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"if(${1:condition}==null){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"if statement checking for null\\\"\\n\\t},\\n\\t\\\"ifnotnull\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"ifnotnull\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"if(${1:condition}!=null){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"if statement checking for not null\\\"\\n\\t},\\n\\t\\\"While Statement\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"while\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"while(${1:condition}){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"While Statement\\\"\\n\\t},\\n\\t\\\"Do-While Statement\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"dowhile\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"do{\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}while(${1:condition});\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Do-While Statement\\\"\\n\\t},\\n\\t\\\"Switch Statement\\\": {\\n\\t\\t\\\"prefix\\\": \\\"switch\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"switch(${1:key}){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Switch Statement\\\"\\n\\t},\\n\\n}\",\"java.json\":\"{\\n\\t\\\"sysout\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"sou\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"System.out.println($1);$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Print to standard out\\\"\\n\\t},\\n\\t\\\"syserr\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"syserr\\\", \\\"serr\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"System.err.println($1);$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Print to standard err\\\"\\n\\t},\\n\\t\\\"fori\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"fo\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"for(${1:int} ${2:i}=${3:0};${2:i}<${4:max};${2:i}${5:++}){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Indexed for loop\\\"\\n\\t},\\n\\t\\\"foreach\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"fore\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"for(${1:type} ${2:var} : ${3:iterable}){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Enhanced for loop\\\"\\n\\t},\\n\\t\\\"if\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"ifi\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"if(${1:condition}){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"if statement\\\"\\n\\t},\\n\\t\\\"ifelse\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"ife\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"if(${1:condition}){\\\",\\n\\t\\t\\t\\\"\\\\t$2\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"else{\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"if/else statement\\\"\\n\\t},\\n\\t\\\"ifnull\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"ifn\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"if(${1:condition}==null){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"if statement checking for null\\\"\\n\\t},\\n\\t\\\"ifnotnull\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"ifnn\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"if(${1:condition}!=null){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"if statement checking for not null\\\"\\n\\t},\\n\\t\\\"While Statement\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"whi\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"while(${1:condition}){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"While Statement\\\"\\n\\t},\\n\\t\\\"Do-While Statement\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"do\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"do{\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}while(${1:condition});\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Do-While Statement\\\"\\n\\t},\\n\\t\\\"Switch Statement\\\": {\\n\\t\\t\\\"prefix\\\": \\\"swi\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"switch(${1:key}){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Switch Statement\\\"\\n\\t},\\n\\t\\\"trycatch\\\": {\\n\\t\\t\\\"prefix\\\": \\\"try\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"try{\\\",\\n\\t\\t\\t\\\"\\\\t${TM_SELECTED_TEXT:$1}\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"catch(${2:Exception} ${3:e}){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"try/catch block\\\"\\n\\t},\\n\\t\\\"tryresources\\\": {\\n\\t\\t\\\"prefix\\\": \\\"tryr\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"try($1){\\\",\\n\\t\\t\\t\\\"\\\\t$2\\\",\\n\\t\\t\\t\\\"}\\\",\\n\\t\\t\\t\\\"catch(${3:Exception} ${4:e}){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t]\\n\\t},\\n\\t\\\"Startup\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"rafay\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"public class ${1:${TM_FILENAME_BASE}}{\\\",\\n\\t\\t\\t\\\"\\\\tpublic static void main(String[] args){\\\",\\n\\t\\t\\t\\\"\\\\t\\\\t$0\\\",\\n\\t\\t\\t\\\"\\\\t}\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Startup\\\"\\n\\t},\\n\\t\\\"class\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"cla\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"${1:public} class ${2:name}{\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t]\\n\\t},\\n\\t\\\"main\\\": {\\n\\t\\t\\\"prefix\\\": [\\\"mai\\\"],\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"public static void main(String[] args){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Public static main method\\\"\\n\\t},\\n\\t\\\"Constructor\\\": {\\n\\t\\t\\\"prefix\\\": \\\"cstr\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"${1:public} ${2:${TM_FILENAME_BASE}}($3){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Constructor\\\"\\n\\t},\\n\\t\\\"method\\\": {\\n\\t\\t\\\"prefix\\\": \\\"meth\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"${1:public}$2 ${3:void} ${4:name}($5){\\\",\\n\\t\\t\\t\\\"\\\\t$0\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Method\\\"\\n\\t},\\n\\t\\\"newObject\\\": {\\n\\t\\t\\\"prefix\\\": \\\"obj\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"${1:Object} ${2:foo} = new ${1}($3);$0\\\",\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Create new Object\\\"\\n\\t},\\n\\t\\\"Field\\\": {\\n\\t\\t\\\"prefix\\\": \\\"var\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"${1:public} ${2:String} ${3:name};\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Field\\\"\\n\\t}\\n}\",\"MySnippets.code-snippets\":\"{\\n\\t// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and \\n\\t// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope \\n\\t// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is \\n\\t// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: \\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. \\n\\t// Placeholders with the same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"scope\\\": \\\"javascript,typescript\\\",\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\n\\t//--------------------------------------------JAVA--------------------------------------------------//\\n\\n\\t\\\"Game Loop\\\": {\\n\\t\\t\\\"scope\\\": \\\"java\\\",\\n\\t\\t\\\"prefix\\\": \\\"gloop\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"@Override\\\",\\n\\t\\t\\t\\\"public void run(){\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\tlong updateInterval = 1000000000/60;\\\",\\n\\t\\t\\t\\\"\\tlong nextUpdateTime = System.nanoTime() + updateInterval;\\\",\\n\\t\\t\\t\\\"\\\",\\n\\t\\t\\t\\\"\\twhile(true){\\\",\\n\\t\\t\\t\\\"\\t\\tupdate();\\\",\\n\\t\\t\\t\\\"\\t\\trepaint();\\\",\\n\\t\\t\\t\\\"\\t\\tlong timeRemaining = nextUpdateTime - System.nanoTime();\\\",\\n\\t\\t\\t\\\"\\t\\ttry{\\\",\\n\\t\\t\\t\\\"\\t\\t\\tif(timeRemaining>0) Thread.sleep(timeRemaining/1000000);\\\",\\n\\t\\t\\t\\\"\\t\\t}\\\"\\n\\t\\t\\t\\\"\\t\\tcatch(InterruptedException e){\\\",\\n\\t\\t\\t\\\"\\t\\t\\te.printStackTrace();\\\"\\n\\t\\t\\t\\\"\\t\\t}\\\",\\n\\t\\t\\t\\\"\\t\\tnextUpdateTime = System.nanoTime() + updateInterval;\\\",\\n\\t\\t\\t\\\"\\t}\\\",\\n\\t\\t\\t\\\"}\\\"\\n\\t\\t]\\n\\t}\\n\\n}\\n\"}"}}