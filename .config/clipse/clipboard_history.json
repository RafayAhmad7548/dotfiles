{"clipboardHistory":[{"value":"brightnessctl s 5%+ # increase brightness","recorded":"2024-12-28 16:27:23.291490562","filePath":"null","pinned":false},{"value":"    col.shadow = rgba(1a1a1aee)\n","recorded":"2024-12-28 16:25:15.793317595","filePath":"null","pinned":false},{"value":"    shadow_render_power = 3\n","recorded":"2024-12-28 16:25:14.086345579","filePath":"null","pinned":false},{"value":"    shadow_range = 4\n","recorded":"2024-12-28 16:25:13.019764251","filePath":"null","pinned":false},{"value":"    drop_shadow = yes\n","recorded":"2024-12-28 16:25:09.606127998","filePath":"null","pinned":false},{"value":"git reset --hard HEAD\n","recorded":"2024-12-28 16:24:14.568075326","filePath":"null","pinned":false},{"value":".config/\n","recorded":"2024-12-28 16:20:52.188015473","filePath":"null","pinned":false},{"value":"supabase on server\n","recorded":"2024-12-28 16:11:14.215828599","filePath":"null","pinned":false},{"value":"https://chat.whatsapp.com/Llbqpi9VsQT5hZT3jY7stq","recorded":"2024-12-27 15:38:54.148938231","filePath":"null","pinned":false},{"value":")","recorded":"2024-12-27 14:58:43.605642468","filePath":"null","pinned":false},{"value":"binWidth","recorded":"2024-12-27 14:58:43.360606729","filePath":"null","pinned":false},{"value":"\"","recorded":"2024-12-27 14:57:49.061925533","filePath":"null","pinned":false},{"value":"        ","recorded":"2024-12-27 14:57:36.673382640","filePath":"null","pinned":false},{"value":"\n","recorded":"2024-12-27 14:56:29.127813860","filePath":"null","pinned":false},{"value":"        // Canvas canvas = new Canvas(600, 400);\n        // drawNormalPDF(canvas);\n\n        // root.getChildren().addAll(canvas);","recorded":"2024-12-27 14:56:27.839418306","filePath":"null","pinned":false},{"value":"    ","recorded":"2024-12-27 14:56:25.576927458","filePath":"null","pinned":false},{"value":"private void drawNormalPDF(Canvas canvas) {\n        GraphicsContext gc = canvas.getGraphicsContext2D();\n\n        // Parameters for Normal Distribution\n        double mu = 300;\n        double sigma = 60;\n        double scale = 200; // Scaling factor for the canvas\n\n        gc.beginPath();\n        gc.moveTo(50, scale * normalPDF(50, mu, sigma) + 100); // Start the curve\n\n        // Plot the normal distribution curve\n        for (int x = 50; x \u003c 550; x++) {\n            double y = scale * normalPDF(x, mu, sigma) + 100; // Calculate the PDF value\n            gc.lineTo(x, y);\n        }\n\n        gc.stroke();\n    }\n\n    private double normalPDF(double x, double mu, double sigma) {\n        return (1.0 / (sigma * Math.sqrt(2 * Math.PI))) * Math.exp(-Math.pow(x - mu, 2) / (2 * Math.pow(sigma, 2)));\n    }","recorded":"2024-12-27 14:56:24.581225896","filePath":"null","pinned":false},{"value":"        // histogram.getData().add(pdfSeries)","recorded":"2024-12-27 14:55:44.183694909","filePath":"null","pinned":false},{"value":"FIX /dev/sda3\n","recorded":"2024-12-27 14:53:53.547713155","filePath":"null","pinned":false},{"value":"        System.out.println(binDivider.getNormalizationFactor());","recorded":"2024-12-27 14:53:27.495878642","filePath":"null","pinned":false},{"value":"stats.getStandardDeviation(); // Standard deviation (spread)","recorded":"2024-12-27 14:42:56.267473003","filePath":"null","pinned":false},{"value":"stats.getMean();   // Mean (center of the distribution)","recorded":"2024-12-27 14:42:53.278371981","filePath":"null","pinned":false},{"value":"    // Normal distribution PDF function","recorded":"2024-12-27 14:42:49.299806554","filePath":"null","pinned":false},{"value":"        // Formula for normal distribution","recorded":"2024-12-27 14:42:47.892992984","filePath":"null","pinned":false},{"value":"\n    ","recorded":"2024-12-27 14:39:40.526541485","filePath":"null","pinned":false},{"value":"\n\n        Canvas canvas = new Canvas();\n        drawNormalPDF(canvas);\n\n        root.getChildren().add(canvas);\n\n","recorded":"2024-12-27 14:39:37.641927861","filePath":"null","pinned":false},{"value":"private double normalPDF(double x, double mu, double sigma) {\n        return (1.0 / (sigma * Math.sqrt(2 * Math.PI))) * Math.exp(-Math.pow(x - mu, 2) / (2 * Math.pow(sigma, 2)));\n    }","recorded":"2024-12-27 14:39:33.081045946","filePath":"null","pinned":false},{"value":"private void drawNormalPDF(Canvas canvas) {\n        GraphicsContext gc = canvas.getGraphicsContext2D();\n\n        // Parameters for Normal Distribution\n        double mu = stats.getMean();   // Mean (center of the distribution)\n        double sigma = stats.getStandardDeviation(); // Standard deviation (spread)\n        double scale = 10; // Scaling factor for the canvas\n\n        gc.beginPath();\n        gc.moveTo(50, scale * normalPDF(50, mu, sigma) + 100); // Start the curve\n\n        // Plot the normal distribution curve\n        for (int x = 50; x \u003c 550; x++) {\n            double y = scale * normalPDF(x, mu, sigma) + 100; // Calculate the PDF value\n            gc.lineTo(x, y);\n        }\n        System.out.println(\"wow\");\n        gc.stroke();\n    }","recorded":"2024-12-27 14:39:31.048797303","filePath":"null","pinned":false},{"value":"60","recorded":"2024-12-27 14:34:38.773427842","filePath":"null","pinned":false},{"value":"300","recorded":"2024-12-27 14:34:33.327833111","filePath":"null","pinned":false},{"value":"    private void drawNormalPDF(Canvas canvas) {\n        GraphicsContext gc = canvas.getGraphicsContext2D();\n\n        // Parameters for Normal Distribution\n        double mu = 300;   // Mean (center of the distribution)\n        double sigma = 60; // Standard deviation (spread)\n        double scale = 200; // Scaling factor for the canvas\n\n        gc.beginPath();\n        gc.moveTo(50, scale * normalPDF(50, mu, sigma) + 100); // Start the curve\n\n        // Plot the normal distribution curve\n        for (int x = 50; x \u003c 550; x++) {\n            double y = scale * normalPDF(x, mu, sigma) + 100; // Calculate the PDF value\n            gc.lineTo(x, y);\n        }\n\n        gc.stroke();\n    }\n\n    // Normal distribution PDF function\n    private double normalPDF(double x, double mu, double sigma) {\n        // Formula for normal distribution\n        return (1.0 / (sigma * Math.sqrt(2 * Math.PI))) * Math.exp(-Math.pow(x - mu, 2) / (2 * Math.pow(sigma, 2)));\n    }","recorded":"2024-12-27 14:34:07.418926288","filePath":"null","pinned":false},{"value":"        root.getChildren().add(histogram);","recorded":"2024-12-27 14:33:39.115754607","filePath":"null","pinned":false},{"value":" ","recorded":"2024-12-27 14:26:56.619664404","filePath":"null","pinned":false},{"value":"BarChart\u003cString, Number\u003e","recorded":"2024-12-27 14:26:55.706810155","filePath":"null","pinned":false},{"value":"BarChart\u003cString, Number\u003e histogram","recorded":"2024-12-27 14:26:40.230321262","filePath":"null","pinned":false},{"value":"\n\n                // double mean = stats.getMean();\n                // double stdDev = stats.getStandardDeviation();\n\n                // int steps = 50; // number of points for smooth line\n                // double minX = stats.getMin();\n                // double maxX = stats.getMax();\n                // double step = (maxX - minX) / steps;\n\n                // for(int i = 0; i \u003c= steps; i++){\n                //     double xVal = minX + i * step;\n\n                //     double pdfVal = binDivider.getNormalizationFactor() * Math.pow(Math.E, -0.5 * Math.pow((xVal - mean) / stdDev, 2));\n                //         // Convert xVal to label format (just for demonstration):\n                //     String range = String.format(\"%f - %f\", stats.getMin() + i * binWidth, stats.getMin() + (i + 1) * binWidth);\n                //     pdfSeries.getData().add(new XYChart.Data\u003c\u003e(range, pdfVal));\n                // }\n\n                // histogram.lookupAll(\".chart-series-line\").forEach(node -\u003e {\n                //     node.setStyle(\"-fx-stroke: red; -fx-stroke-width: 2;\");\n                // });","recorded":"2024-12-27 14:26:24.238495567","filePath":"null","pinned":false},{"value":"\n        \n\n        // XYChart.Series\u003cString, Number\u003e pdfSeries = new XYChart.Series\u003c\u003e();\n        // pdfSeries.setName(\"PDF\");","recorded":"2024-12-27 14:26:14.289892618","filePath":"null","pinned":false},{"value":"        histogram.getData().add(series);","recorded":"2024-12-27 14:23:01.020067208","filePath":"null","pinned":false},{"value":"CategoryAxis xAxis = new CategoryAxis();\n        NumberAxis yAxis = new NumberAxis();\n\n        BarChart\u003cString, Number\u003e histogram = new BarChart\u003c\u003e(xAxis, yAxis);\n        histogram.setTitle(\"Histogram\");\n\n        XYChart.Series\u003cString, Number\u003e series = new XYChart.Series\u003c\u003e();\n        series.setName(\"Data Distribution\");","recorded":"2024-12-27 14:22:53.370982286","filePath":"null","pinned":false},{"value":"BinDivider binDivider = new BinDivider(data, numBins);\n                binDivider.divideIntoBins();\n                List\u003cDouble\u003e freq = binDivider.getAllNormalizedFrequencies();\n\n                double binWidth = binDivider.getBinWidth();\n\n                series.getData().clear();\n                for(int i=0;i\u003cnumBins;i++){\n                    String range = String.format(\"%f - %f\", stats.getMin() + i * binWidth, stats.getMin() + (i + 1) * binWidth);\n                    series.getData().add(new XYChart.Data\u003c\u003e(range, freq.get(i)));\n                }","recorded":"2024-12-27 14:22:37.086906149","filePath":"null","pinned":false},{"value":"c","recorded":"2024-12-27 14:22:05.283258524","filePath":"null","pinned":false},{"value":";","recorded":"2024-12-27 14:22:03.756849300","filePath":"null","pinned":false},{"value":"private","recorded":"2024-12-27 14:21:19.576707559","filePath":"null","pinned":false},{"value":"can i not add a line to the same chart","recorded":"2024-12-27 14:18:39.376571607","filePath":"null","pinned":false},{"value":"lineChart","recorded":"2024-12-27 14:17:25.985972762","filePath":"null","pinned":false},{"value":"        lineChart.setStyle(\"-fx-background-color: transparent;\");","recorded":"2024-12-27 14:17:15.944675027","filePath":"null","pinned":false},{"value":"label","recorded":"2024-12-27 14:16:23.453209246","filePath":"null","pinned":false},{"value":"                    String range = String.format(\"%f - %f\", stats.getMin() + i * binWidth, stats.getMin() + (i + 1) * binWidth);","recorded":"2024-12-27 14:16:15.647956674","filePath":"null","pinned":false},{"value":"xVal","recorded":"2024-12-27 14:16:11.286085831","filePath":"null","pinned":false},{"value":"Number","recorded":"2024-12-27 14:16:06.172694374","filePath":"null","pinned":false},{"value":"xAxis2","recorded":"2024-12-27 14:15:51.012135797","filePath":"null","pinned":false},{"value":"        NumberAxis xAxis2 = new NumberAxis();","recorded":"2024-12-27 14:15:46.758705422","filePath":"null","pinned":false},{"value":"        root.getChildren().add(histogram);\n        root.getChildren().add(pdfChart);","recorded":"2024-12-27 14:14:20.059824790","filePath":"null","pinned":false},{"value":"        pdfChart.","recorded":"2024-12-27 14:14:15.345723706","filePath":"null","pinned":false},{"value":"                histogram.lookupAll(\".chart-series-line\").forEach(node -\u003e {\n                    node.setStyle(\"-fx-stroke: red; -fx-stroke-width: 2;\");\n                });","recorded":"2024-12-27 14:12:05.723170561","filePath":"null","pinned":false},{"value":"LineChart","recorded":"2024-12-27 14:11:59.316854801","filePath":"null","pinned":false},{"value":"histogram","recorded":"2024-12-27 14:11:52.923316922","filePath":"null","pinned":false},{"value":"e","recorded":"2024-12-27 14:11:02.290721537","filePath":"null","pinned":false},{"value":"String","recorded":"2024-12-27 14:10:58.807729386","filePath":"null","pinned":false},{"value":"range","recorded":"2024-12-27 14:10:53.819122795","filePath":"null","pinned":false},{"value":"histogram.lookupAll(\".chart-series-line\").forEach(node -\u003e {\n    node.setStyle(\"-fx-stroke: red; -fx-stroke-width: 2;\");\n});","recorded":"2024-12-27 14:08:41.230500049","filePath":"null","pinned":false},{"value":"\"\",","recorded":"2024-12-27 14:07:15.993382895","filePath":"null","pinned":false},{"value":"import javafx.scene.chart.CategoryAxis;","recorded":"2024-12-27 14:02:59.368627318","filePath":"null","pinned":false},{"value":"    double binStart = stats.getMin() + i * binWidth;\n    double binEnd = stats.getMin() + (i + 1) * binWidth;\n    double binCenter = (binStart + binEnd) / 2;","recorded":"2024-12-27 14:02:26.364516977","filePath":"null","pinned":false},{"value":"CategoryAxis","recorded":"2024-12-27 14:01:40.698055434","filePath":"null","pinned":false},{"value":"        xAxis.setTickLabelGap(50);","recorded":"2024-12-27 14:01:38.091601451","filePath":"null","pinned":false},{"value":"        // xAxis.setAutoRanging(false);","recorded":"2024-12-27 14:01:37.227924033","filePath":"null","pinned":false},{"value":"                histogram.layout();","recorded":"2024-12-27 14:00:56.822583148","filePath":"null","pinned":false},{"value":"                xAxis.getCategories().clear();","recorded":"2024-12-27 13:03:46.308340814","filePath":"null","pinned":false},{"value":"                    xAxis.getCategories().add(range);","recorded":"2024-12-27 13:03:44.544270540","filePath":"null","pinned":false},{"value":"selected","recorded":"2024-12-27 13:03:12.219922701","filePath":"null","pinned":false},{"value":"                series.","recorded":"2024-12-27 13:02:54.881598562","filePath":"null","pinned":false},{"value":"setCategories();","recorded":"2024-12-27 13:02:35.420457160","filePath":"null","pinned":false},{"value":"bins = new ArrayList\u003cList\u003cDouble\u003e\u003e();\n        for(int i = 0; i \u003c numBins; i++){\n            bins.add(new ArrayList\u003cDouble\u003e());\n        }","recorded":"2024-12-27 12:51:08.736820879","filePath":"null","pinned":false},{"value":"CategoryAxis xAxis = new CategoryAxis();\n        NumberAxis yAxis = new NumberAxis();\n\n        BarChart\u003cString, Number\u003e histogram = new BarChart\u003c\u003e(xAxis, yAxis);\n        histogram.setTitle(\"Histogram\");\n\n        XYChart.Series\u003cString, Number\u003e series = new XYChart.Series\u003c\u003e();\n        series.setName(\"Data Distribution\");\n\n        XYChart.Series\u003cNumber, Number\u003e pdfSeries = new XYChart.Series\u003c\u003e();\n        pdfSeries.setName(\"PDF\");","recorded":"2024-12-27 12:48:59.968035078","filePath":"null","pinned":false},{"value":"        CategoryAxis xAxis = new CategoryAxis();","recorded":"2024-12-27 12:46:47.139553978","filePath":"null","pinned":false},{"value":"how to do that\n\n","recorded":"2024-12-27 12:46:06.040119384","filePath":"null","pinned":false},{"value":"0","recorded":"2024-12-27 12:44:13.399522134","filePath":"null","pinned":false},{"value":"series","recorded":"2024-12-27 12:42:55.513581344","filePath":"null","pinned":false},{"value":"null","recorded":"2024-12-27 12:41:42.378255496","filePath":"null","pinned":false},{"value":"                    double pdfVal = (1 / (stdDev * Math.sqrt(2 * Math.PI))) *\n                                    Math.exp(-0.5 * Math.pow((xVal - mean) / stdDev, 2));","recorded":"2024-12-27 12:41:07.013966903","filePath":"null","pinned":false},{"value":"double pdfVal = (1 / (stdDev * Math.sqrt(2 * Math.PI))) *\n    Math.pow(Math.E, -0.5 * Math.pow((xVal - mean) / stdDev, 2));","recorded":"2024-12-27 12:41:01.069158067","filePath":"null","pinned":false},{"value":"        Math.pow(Math.E, -0.5 * Math.pow((xVal - mean) / stdDev, 2));","recorded":"2024-12-27 12:40:57.526960240","filePath":"null","pinned":false},{"value":"    Math.pow(Math.E, -0.5 * Math.pow((xVal - mean) / stdDev, 2));","recorded":"2024-12-27 12:40:52.468376185","filePath":"null","pinned":false},{"value":"                    String xLabel = String.format(\"%.2f\", xVal);","recorded":"2024-12-27 12:39:34.670927751","filePath":"null","pinned":false},{"value":"xLabel","recorded":"2024-12-27 12:39:32.407733398","filePath":"null","pinned":false},{"value":"double mean = stats.getMean();\n        double stdDev = stats.getStandardDeviation();\n\n        int steps = 50; // number of points for smooth line\n        double minX = stats.getMin();\n        double maxX = stats.getMax();\n        double step = (maxX - minX) / steps;\n\n        for(int i = 0; i \u003c= steps; i++){\n            double xVal = minX + i * step;\n            double pdfVal = (1 / (stdDev * Math.sqrt(2 * Math.PI))) *\n                            Math.exp(-0.5 * Math.pow((xVal - mean) / stdDev, 2));\n            // Convert xVal to label format (just for demonstration):\n            String xLabel = String.format(\"%.2f\", xVal);\n            pdfSeries.getData().add(new XYChart.Data\u003c\u003e(xLabel, pdfVal));\n        }","recorded":"2024-12-27 12:36:30.085180221","filePath":"null","pinned":false},{"value":"histogram.getData().add(pdfSeries);","recorded":"2024-12-27 12:35:38.067653093","filePath":"null","pinned":false},{"value":"double mean = stats.getMean();\ndouble stdDev = stats.getStandardDeviation();","recorded":"2024-12-27 12:35:17.319497249","filePath":"null","pinned":false},{"value":"int steps = 50; // number of points for smooth line\ndouble minX = stats.getMin();\ndouble maxX = stats.getMax();\ndouble step = (maxX - minX) / steps;\n\nfor(int i = 0; i \u003c= steps; i++){\n    double xVal = minX + i * step;\n    double pdfVal = (1 / (stdDev * Math.sqrt(2 * Math.PI))) *\n                    Math.exp(-0.5 * Math.pow((xVal - mean) / stdDev, 2));\n    // Convert xVal to label format (just for demonstration):\n    String xLabel = String.format(\"%.2f\", xVal);\n    pdfSeries.getData().add(new XYChart.Data\u003c\u003e(xLabel, pdfVal));\n}","recorded":"2024-12-27 12:35:04.021237066","filePath":"null","pinned":false},{"value":"Fit and plot the histogram with a Probability Density Function model (PDF). ","recorded":"2024-12-27 12:31:50.341858120","filePath":"null","pinned":false},{"value":"                histogram.getData().clear(); // Clear old data\n                histogram.getData().add(series); // Add updated data","recorded":"2024-12-27 12:31:08.380714456","filePath":"null","pinned":false},{"value":"histogram.getData().clear(); // Clear old data\nhistogram.getData().add(series); // Add updated data\n","recorded":"2024-12-27 12:30:39.590183675","filePath":"null","pinned":false},{"value":"h","recorded":"2024-12-27 12:28:59.586361005","filePath":"null","pinned":false},{"value":"        xAxis.setTickLabelGap(10);","recorded":"2024-12-27 12:28:08.560230106","filePath":"null","pinned":false},{"value":"s = new CategoryAxis();","recorded":"2024-12-27 12:27:36.578549228","filePath":"null","pinned":false},{"value":"            ","recorded":"2024-12-27 12:26:18.936108254","filePath":"null","pinned":false},{"value":"                // TODO Auto-generated catch block","recorded":"2024-12-27 12:26:16.053791223","filePath":"null","pinned":false},{"value":"try{\n            }\n            catch(IOException ex){\n                ex.printStackTrace();\n            }","recorded":"2024-12-27 12:26:01.487175750","filePath":"null","pinned":false},{"value":"                ImageIO.write(SwingFXUtils.fromFXImage(snapshot, null), \"png\", img);","recorded":"2024-12-27 12:25:55.832238174","filePath":"null","pinned":false}]}